require 'rubygems' if RUBY_VERSION < '1.9.0'
require 'em-http-request'
require 'eventmachine'
require 'multi_json'

module Sensu::Extension
  class InfluxDB < Handler
    def name
      definition[:name]
    end

    def definition
      {
        type: 'extension',
        name: 'influxdb'
      }
    end

    def description
      'Outputs metrics to InfluxDB'
    end

    def post_init()
      @influx_conf = parse_settings
      logger.info("InfluxDB extension initialiazed using #{@influx_conf['protocol'] }://#{ @influx_conf['host'] }:#{ @influx_conf['port'] } - Defaults : db=#{@influx_conf['database']} precision=#{@influx_conf['time_precision']}")

      @buffer = {}
      @flush_timer = EventMachine::PeriodicTimer.new(@influx_conf['buffer_max_age'].to_i) do
        unless buffer_size == 0
          logger.debug("InfluxDB cache age > #{@influx_conf['buffer_max_age']} : forcing flush")
          flush_buffer
        end
      end
      logger.info("InfluxDB write buffer initiliazed : buffer flushed every #{@influx_conf['buffer_max_size']} points OR every #{@influx_conf['buffer_max_age']} seconds) ")
    end

    def run(event_data)
      event = parse_event(event_data)

      # init event and check data
      body = []
      client = event['client']['name']
      cli_domain = client.split('.', 2)[1]
      hostname = client.split('.', 2)[0]
      metric = event['check']['name']
      strip_metric = @influx_conf['strip_metric']
      event['check']['influxdb']['database'] ||= @influx_conf['database']
      event['check']['time_precision'] ||= @influx_conf['time_precision']
      mydic = {}
      v_timestamp = nil
      check_command = event['check']['command']


      if check_command =~ /metrics-cpu.rb/
        real_tag_map = [nil, 'cpuname', nil]
      elsif check_command =~ /metrics-disk.rb/
        real_tag_map = [nil, 'diskname', nil]
      elsif check_command =~ /metrics-iostat-extended.rb/
        real_tag_map = [nil, 'diskname', nil]
      elsif check_command =~ /metrics-netif.rb/
        real_tag_map = [nil, 'interface', nil]
      elsif check_command =~ /metrics-interface.rb/
        real_tag_map = [nil, 'interface', nil]
      elsif check_command =~ /metrics-disk-capacity.rb/
        real_tag_map = [nil, 'filesystem', nil]
      elsif check_command =~ /metrics-disk-usage.rb/
        real_tag_map = [nil, 'mountpoint', nil]
      elsif check_command =~ /metric-postgres-connections.rb/
        real_tag_map = [nil, nil, 'dbname', nil]
      elsif check_command =~ /metric-postgres-dbsize.rb/
        real_tag_map = [nil, nil, 'dbname']
      elsif check_command =~ /metric-postgres-statsdb.rb/
        real_tag_map = [nil, nil, 'dbname', nil]
      elsif check_command =~ /metric-postgres-statsio.rb/
        real_tag_map = [nil, nil, 'dbname', nil]
      elsif check_command =~ /metric-postgres-statstable.rb/
        real_tag_map = [nil, nil, 'dbname', nil]
      elsif check_command =~ /metrics-haproxy.rb/
        real_tag_map = [nil, 'backend', nil]
      elsif check_command =~ /metrics-redis-graphite.rb/
        real_tag_map = [nil, 'port', nil]
      else
        real_tag_map = []
      end

      if @influx_conf['convert_influxdb'] == true
        event['check']['output'].split(/\n/).each do |line|
          fake = nil
          tmpdata, tmpvalue, timestamp = line.split(/\s+/)

          if strip_metric and strip_metric != ''
              if strip_metric == 'host'
                tmpdata = slice_host(tmpdata, hostname)
                check1 = tmpdata.split('.', 2)[0]
                check2 = cli_domain.split('.', 2)[0]
                if check1 == check2
                   tmpdata = slice_host(tmpdata, cli_domain)
                end
              else
                tmpdata.gsub!(/^.*#{strip_metric}\.(.*$)/, '\1')
              end
          else
              tmpdata = tmpdata.split('.', 2)[1]
              tmpdata.gsub!('.', '_')
          end

          b = tmpdata.split('.')

          if b.length == 2
              tag_map = []
              fake = 1
          else
              tag_map = real_tag_map
          end
          tmpzip = tag_map.zip(b)

          mytagstring = ""
          tmptag = @influx_conf['tags'].merge(event['check']['influxdb']['tags']).merge(event['client']['influxdb']['tags']).merge({'host' => client}).merge({'metric' => metric}).merge({'domain' => cli_domain})
          tmptag.each do |tag, val|
            if mytagstring != ""
              mytagstring += ","
            end
            mytagstring += "#{tag}=#{val}"
          end

          tmpzip.each { |thiszip|
              unless thiszip[0].nil?
                  tagname = thiszip[0]
                  tagvalue = thiszip[1]
                  myindex = b.index(tagvalue)
                  b.delete_at(myindex)
                  if mytagstring != ""
                      mytagstring += ","
                  end
                  mytagstring += "#{tagname}=#{tagvalue}"
              end
          }

          if b.length >= 2
            if fake == 1
              b.push('value')
            end
            remains = b[-1]
            tmp_keys = b.reverse.drop(1).reverse.join(".")
            tmp_keys.gsub!(',', '\,')
            tmp_keys.gsub!(/\s/, '\ ')
            tmp_keys.gsub!('"', '\"')
            tmp_keys.gsub!("\\"){ "\\\\" }
            mytagstring = tmp_keys + ","  + mytagstring

            v_timestamp = timestamp

            if not mydic.has_key?(mytagstring)
                mydic[mytagstring] = {}
            end
            mydic[mytagstring][remains] = tmpvalue
          end
        end

        @buffer[event['check']['influxdb']['database']] ||= {}
        @buffer[event['check']['influxdb']['database']][event['check']['time_precision']] ||= []

        mydic.each do |tags, values|
            if tags != ""
                tmpstr = ""
                values.each do |valuename, value|
                    if tmpstr != ""
                        tmpstr += ","
                    end
                    tmpstr += "#{valuename}=#{value}"
                end
                print "#{tags} #{tmpstr} #{v_timestamp}" + "\n"
                @buffer[event['check']['influxdb']['database']][event['check']['time_precision']].push("#{tags} #{tmpstr} #{v_timestamp}")
            end
        end
      else
        event['check']['output'].split(/\n/).each do |line|
          key, value, time = line.split(/\s+/)
          values = "value=#{value.to_f}"

          if event['check']['duration']
            values += ",duration=#{event['check']['duration'].to_f}"
          end

          logger.debug("debug cli_domain: #{ cli_domain }")

          if strip_metric and strip_metric != ''
              if strip_metric == 'host'
                key = slice_host(key, hostname)
                check1 = key.split('.', 2)[0]
                check2 = cli_domain.split('.', 2)[0]
                if check1 == check2
                   key = slice_host(key, cli_domain)
                end
              else
                key.gsub!(/^.*#{strip_metric}\.(.*$)/, '\1')
              end
          else
              key = key.split('.', 2)[1]
              key.gsub!('.', '_')
          end

          # Avoid things break down due to comma in key name
          key.gsub!(',', '\,')
          key.gsub!(/\s/, '\ ')
          key.gsub!('"', '\"')
          key.gsub!("\\"){ "\\\\" }

          # This will merge : default conf tags < check embedded tags < sensu client/host tag
          tags = @influx_conf['tags'].merge(event['check']['influxdb']['tags']).merge(event['client']['influxdb']['tags']).merge({'host' => client}).merge({'metric' => metric}).merge({'domain' => cli_domain})
          tags.each do |tag, val|
            key += ",#{tag}=#{val}"
          end

          @buffer[event['check']['influxdb']['database']] ||= {}
          @buffer[event['check']['influxdb']['database']][event['check']['time_precision']] ||= []

          @buffer[event['check']['influxdb']['database']][event['check']['time_precision']].push([key, values, time.to_i].join(' '))
        end
      end

      flush_buffer if buffer_size >= @influx_conf['buffer_max_size']

      yield('', 0)
    end

    def stop
      logger.info('Flushing InfluxDB buffer before exiting')
      flush_buffer
      true
    end

    private

    def flush_buffer
      @flush_timer.cancel
      logger.debug('Flushing InfluxDB buffer')
      @buffer.each do |db, tp|
        tp.each do |p, points|
          logger.debug("Sending #{ points.length } points to #{ db } InfluxDB database with precision=#{ p }")

          EventMachine::HttpRequest.new("#{ @influx_conf['protocol'] }://#{ @influx_conf['host'] }:#{ @influx_conf['port'] }/write?db=#{ db }&precision=#{ p }&u=#{ @influx_conf['username'] }&p=#{ @influx_conf['password'] }").post :body => points.join("\n")

        end
        logger.debug("Cleaning buffer for db #{ db }")
        @buffer[db] = {}
      end
    end

    def buffer_size
      sum = @buffer.map { |_db, tp| tp.map { |_p, points| points.length}.inject(:+) }.inject(:+)
      return sum || 0
    end

    def parse_event(event_data)
      begin
        event = MultiJson.load(event_data)

        # default values
        # n, u, ms, s, m, and h (default community plugins use standard epoch date)
        event['check']['time_precision'] ||= nil
        event['check']['influxdb'] ||= {}
        event['check']['influxdb']['tags'] ||= {}
        event['check']['influxdb']['database'] ||= nil
        event['client']['influxdb'] ||= {}
        event['client']['influxdb']['tags'] ||= {}

      rescue => e
        logger.error("Failed to parse event data: #{e}")
      end
      return event
    end

    def parse_settings()
      begin
        settings = @settings['influxdb']

        # default values
        settings['tags'] ||= {}
        settings['use_ssl'] ||= false
        settings['time_precision'] ||= 's'
        settings['protocol'] = settings['use_ssl'] ? 'https' : 'http'
        settings['buffer_max_size'] ||= 5
        settings['buffer_max_age'] ||= 6 # seconds
        settings['port'] ||= 8086
        settings['convert_influxdb'] ||= false

      rescue => e
        logger.error("Failed to parse InfluxDB settings #{e}")
      end
      return settings
    end

    def slice_host(slice, prefix)
      prefix.chars.zip(slice.chars).each do |char1, char2|
        break if char1 != char2
        slice.slice!(char1)
      end
      slice.slice!('.') if slice.chars.first == '.'
      return slice
    end

    def logger
      Sensu::Logger.get
    end
  end
end